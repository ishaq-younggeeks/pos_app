import React, { Component } from 'react';
import $ from 'jquery';
import { PostData, GetData, DeleteData ,editPromo} from './services/postData';
import axios from 'axios';
import PromotionDescription from './PromotionDescription';
import Modal from 'react-awesome-modal';

class Promotion extends Component {
    constructor(props){
        super(props);
        this.state = {
            user_id:'',
            success:'',
            image:'',
            allData:[],
            deleteMsgStatus:'',
            ImageError:'',
            showLogoImage:'',
            eating_opt:[],
            sResult:'',
            timing_to:'',
            timing_from:'',
            deleteMsgStatus:'',
            eating_opt_arr : {
                "delivery":"Delivery","dine in":"Dine-in","take away":"Take Away","drive throughout":"Drive Throughout"
            },
            editingFields:"",
            editData:[],
            name:'',
            description:'',
            id:'',
            toggle:false,
            toggleData:'',
            editId:'',
            myId:0
        }
        this.onChange = this.onChange.bind(this);
        this.formSubmit = this.formSubmit.bind(this);
        this.removeImage = this.removeImage.bind(this);
        this.onTimingFrom = this.onTimingFrom.bind(this);
        this.onTimingTo = this.onTimingTo.bind(this);
    }
    componentWillMount(){
        let userId = localStorage.getItem("userId");
        this.setState({user_id:userId});
    }

    componentDidMount(){
        GetData('all-promo').then((result) => {
            let responseData = result;
            this.setState({allData:responseData.data});
        })
        let myData = this.state.allData!== null && this.state.myData;
    }

    checkEating = (sting,data) => { 
        
        
        let eating_opt = this.state.eating_opt_arr;
        let x = '';
        for (x in eating_opt) {
            if (eating_opt[x]) {
                return true;
            }
        }
        return false
    }

    onLogo = event => {
        if (event.target.files && event.target.files[0]) {
            let file = event.target.files[0];
            
            if(file.size < 307200){
                $("#remove_image").show();
                this.setState({showLogoImage:URL.createObjectURL(event.target.files[0])});
                let reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onloadend = () => {
                    this.setState({
                        image: reader.result
                    });
                }
            }else{
                this.setState({LogoImageError:'File is too big'})
                
            }
        }
      }

    removeImage(){
        $("#promoImage").val("");
        this.setState({
            image: '',
            showLogoImage:''
        });
        $("#remove_image").hide();
    }

    formSubmit(event,id){
        
        event.preventDefault();
        if(this.state.name){
            
            if(id < this.state.editId) {
                
                PostData('add-promotion',this.state).then((result) => {
                    let responseJson = result;
                    this.setState({success:responseJson.response.msg});
                    this.setState({sResult:responseJson.response.result});
                });
            } else {
                
                PostData('add-promotion',this.state).then((result) => {
                    let responseJson = result;
                    this.setState({success:responseJson.response.msg});
                    this.setState({sResult:responseJson.response.result});
                });
            }
        }
    }

        // formSubmit = (e,id) => {
        //     e.preventDefault();
        //     let userId = parseInt(localStorage.getItem('userId'))
        //         if(id < this.state.editId) {
        //             var myData = {
        //                 admin_id : userId,
        //                 cuisine_name : this.state.addcausine,
        //                 // image : item.image,
        //                 id:this.state.editId,
        //             }
        //         } else {
        //             var myData = {
        //                 admin_id : userId,
        //                 cuisine_name : this.state.addcausine,
        //                 // image : this.state.myImage,
        //                 id:this.state.id,
        //             }
        //         }
        //     const type = "add-cuisine"
        //     let BaseUrl = `${Config.url}${type}`;
        //     axios({
        //         method:'post',
        //         url:BaseUrl,
        //         data:myData
        //     }).then((res) => {  
        //         
        //     }).catch((err) => {
        //         
        //     })
        // }

    onChange(e){
        const checkedArr = [];
        let values;
        if (e.target.type !== 'checkbox') {
            values = e.target.value;
            } else if(e.target.name === 'eating_opt') {
            const checkeds = document.getElementsByTagName('input');
            for (let i = 0; i < checkeds.length; i++) {
                if (checkeds[i].checked) {
                    checkedArr.push(checkeds[i].value);
                }
            }
            values = checkedArr;
          
        }
        this.setState({[e.target.name]:values});
    }
    onTimingFrom(){
        var inputEle = document.getElementById('timing_from');
        var timeSplit = inputEle.value.split(':'),
            hours,
            minutes,
            meridian;
        hours = timeSplit[0];
        minutes = timeSplit[1];
        if (hours > 12) {
            meridian = 'PM';
            hours -= 12;
        } else if (hours < 12) {
            meridian = 'AM';
            if (hours == 0) {
            hours = 12;
            }
        } else {
            meridian = 'PM';
        }
        var timing_from = hours + ':' + minutes + ' ' + meridian;
        this.setState({timing_from:timing_from});
        let timingFrom = this.state.editData.timing_from;
        let value = inputEle.id === "timing_form"
        // if(inputEle.id === 'timing_from')
    }
    onTimingTo(){
        var inputEle = document.getElementById('timing_to');
        var timeSplit = inputEle.value.split(':'),
            hours,
            minutes,
            meridian;
        hours = timeSplit[0];
        minutes = timeSplit[1];
        if (hours > 12) {
            meridian = 'PM';
            hours -= 12;
        } else if (hours < 12) {    
            meridian = 'AM';
            if (hours == 0) {
            hours = 12;
            }
        } else {
            meridian = 'PM';
        }
        var timing_to = hours + ':' + minutes + ' ' + meridian;
        this.setState({timing_to:timing_to});
    }
    deletePromo(promoId){
        if (window.confirm("Delete the item?")) {
        DeleteData('delete-prom',promoId).then((result) => {
            let deleteResponse = result;
            
            this.setState({deleteMsgStatus:deleteResponse.response.msg});
            if(deleteResponse.response.result==1){
                window.location.reload();
            }
            
        });
    }
  }


    // edit = (id) => {
    //     let editing;
    //   this.state.allData.forEach((item) => {
    //     if(item.pro_id === id) {
    //             editing = item
    //     }
    //     this.setState({
    //         editingFields:editing
    //     })
    //   })
    //   this.editPromo("edit-promption",id,editing)
    // }

    edit = (item) => {
        
        this.setState({editId:item.id})
        // this.setState({addcausine:item.cuisine_name})
    }

    editPromo(type,id,data) {
        let myData = {
          user_id : data.user_id,
          name : data.name,
          price : data.price,
          description : data.description,
          eating_opt : data.eating_opt,
          timing_from : data.timing_from,
          timing_to : data.timing_to,
          date_from : data.date_from,
          date_to : data.date_to,
          image : data.image,
          pro_id : data.pro_id
        }
        let BaseUrl = `${Config.url}${type}/${id}`
        axios({
          method:'post',
          url:BaseUrl,
          data: myData,
        }) .then (response => {
          
          let editResponse = response;
          this.setState({editData : editResponse.data.response.data[0]})
          this.setState({id:this.state.editData.pro_id})
            $("#name").val(this.state.editData.name);
            $("#description").val(this.state.editData.description);
            $("#price").val(this.state.editData.price);
            $("#timing_form").val(this.state.editData.timing_from);
            $("#time_to").val(this.state.editData.timing_to);
            $("#date_to").val(this.state.editData.date_to);
            if(editResponse.response.result ==1) {
                $("#eating_opt").val(this.state.editData.eating_opt);
            } else {
                $("#eating_opt").prop('');
            }
            $("#image").val(this.state.editData.image);
        }) .catch (error => {
          
        })
      }
      
      istoggleOn(data) {
        this.setState(prevState => ({
          toggle: !prevState.toggle,    
        }));
        this.setState({toggleData:data})
      }

      closeModal() {
        this.setState({
            toggle : false
        });
    }

    render() {
        
        if(this.state.sResult==='1'){
            window.location.reload();
        }
        const fileInpuButtonInput = {
            position: 'absolute',
            top: '0px',
            opacity: '0',
            cursor: 'pointer',
            height: '30px',
            left: '14px',
            width: '95%'
        }
        return (
          
            <div className="content-wrapper">
              <div>
                <section className="content-header">
                    <h1>
                        Promotions
                    </h1>
                    <span>{this.state.success}</span>
                    <span>{this.state.deleteMsgStatus}</span>
                </section>
                <section className="content">

                    <div className="row">
                        <div className="col-md-12">
                            <div className="thumbnail">
                                <div className="clearfix"></div><br/>
                                <div className="col-md-12">
                                    <form action="#0" className="form-horizontal" onSubmit={(e) =>this.formSubmit(e,this.state.myId)}>
                                        <div className="row">
                                            <div className="col-xs-6">
                                                <div className="form-group">
                                                    <label className="col-sm-3 control-label">Name</label>
                                                    <div className="col-sm-9">
                                                        <input type="text" id="name" name="name" onChange={this.onChange} className="form-control input-sm" placeholder="Name"/>
                                                    </div>
                                                </div>
                                                <div className="form-group">
                                                    <label className="col-sm-3 control-label">Description</label>
                                                    <div className="col-sm-9">
                                                        <input type="text" id="description" name="description" onChange={this.onChange} className="form-control input-sm" placeholder="Description"/>
                                                    </div>
                                                </div>
                                                <div className="form-group">
                                                    <label className="col-sm-3 control-label">Price</label>
                                                    <div className="col-sm-9">
                                                        <input type="text" id="price" name="price" onChange={this.onChange}  className="form-control input-sm" placeholder="Price"/>
                                                    </div>
                                                </div>
                                                <div className="form-group">
                                                    <label className="col-sm-3 control-label">Eating Option</label>
                                                    <div className="col-sm-9">
                                                        <label className="checkbox-inline"><input type="checkbox" value="Delivery" id="eating_opt" name="eating_opt" onChange={this.onChange} /> Delivery</label>
                                                        <label className="checkbox-inline"><input type="checkbox" value="Dine-in" id="eating_opt" name="eating_opt" onChange={this.onChange} /> Dine-in</label> &nbsp;
                                                        <div className="clearfix visible-xs"></div>
                                                        <label className="checkbox-inline"><input type="checkbox" value="Take Away" id="eating_opt" name="eating_opt" onChange={this.onChange} /> Take Away</label>
                                                        <label className="checkbox-inline"><input type="checkbox" value="Drive Through" id="eating_opt" name="eating_opt" onChange={this.onChange} /> Drive Through</label>
                                                    </div>
                                                </div>
                                                <div className="form-group">
                                                    <label className="col-sm-3 control-label" id="image">Upload Picture</label>
                                                    <div className="col-sm-9">
                                                        <span className="btn btn-warning btn-sm btn-block fileinput-button">
                                                            <i className="glyphicon glyphicon-plus"></i>
                                                            <span className="text-white">Add Files</span>
                                                            <input type="file" id="promoImage" name="image" onChange={this.onLogo}  style={fileInpuButtonInput} />
                                                        </span>
                                                        <span id="remove_image" onClick={this.removeImage} style={{cursor: 'pointer',display:'none',float: 'right',margin: '-55px -175px 0px 0px'}}><i className="fa fa-remove"></i></span>
                                                    </div>
                                                    <img src={this.state.showLogoImage} style={{width: '100px',float: 'right',margin: '-15px -158px 0px 0px'}} />
                                                </div>
                                            </div>
                                            <div className="col-xs-6">
                                                <div className="form-group">
                                                    <label className="col-sm-3 control-label">Timings</label>
                                                    <div className="col-sm-8">
                                                        <div className="input-group input-group-sm">
                                                            <span className="input-group-addon">From</span>
                                                            <input type="time" className="form-control" id="timing_from" name="timing_from" onChange={this.onTimingFrom} placeholder="Hour" style={{borderRadius: '0px'}}/>
                                                            <span className="input-group-addon" style={{borderLeft:'0px',borderRight: '0px'}}>To</span>
                                                            <input type="time" className="form-control" id="timing_to" id="time_to" name="timing_to" onChange={this.onTimingTo} placeholder="Hour" style={{borderRadius: '0px 3px 3px 0px' }}/>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div className="form-group">
                                                    <label className="col-sm-3 control-label">Date</label>
                                                    <div className="col-sm-8">
                                                        <div className="input-group input-group-sm">
                                                            <span className="input-group-addon">From</span>
                                                            <input type="date" className="form-control" name="date_from" onChange={this.onChange} placeholder="Date" style={{borderRadius: '0px'}}/>
                                                            <span className="input-group-addon" style={{borderLeft:'0px',borderRight: '0px'}}>To</span>
                                                            <input type="date" className="form-control" name="date_to" onChange={this.onChange} placeholder="Date" style={{borderRadius: '0px 3px 3px 0px' }}/>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div className="form-group">
                                            <label className="col-md-2 control-label">Product Feature</label>
                                            <div className="col-md-5" >
                                                <div className="checkbox">
                                                    <label>
                                                        <input type="checkbox" name="product_feature" value="Vegetarian" onChange={this.onChange} /> Vegetarian
                                                    </label>
                                                </div>
                                                <div className="checkbox">
                                                    <label>
                                                        <input type="checkbox" name="product_feature" value="Vegetarian Friendly" onChange={this.onChange} /> Vegetarian Friendly
                                                    </label>
                                                </div>
                                                <div className="checkbox">
                                                    <label>
                                                        <input type="checkbox" name="product_feature" value="This product only suitable for 21+" onChange={this.onChange} /> This product only suitable for 21+
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                        <div className="form-group">
                                            <label className="col-md-2 control-label">Counter</label>
                                            <div className="col-md-5">
                                                <label className="radio-inline">
                                                    <input type="radio" name="counter" value="Food" onChange={this.onChange} /> Food
                                                </label>
                                                <label className="radio-inline">
                                                    <input type="radio" name="counter" value="Drink" onChange={this.onChange} /> Drink
                                                </label>
                                            </div>
                                        </div>
                                        <div className="form-group">
                                            <label className="col-md-2 control-label">Tags</label>
                                            <div className="col-md-5">
                                                <textarea rows="3" name="tags" onChange={this.onChange} className="form-control input-sm" placeholder="Tags"></textarea>
                                            </div>
                                        </div>
                                        </div>
                                        <div className="form-group">
                                            <div className="col-sm-12 text-center">
                                                <input type="submit" value="Submit" className="btn btn-gray btn-sm"/>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                                <div className="clearfix"></div><br/>
                            </div>

                            <h4>Listing</h4>
                            <div className="thumbnail">
                                <table className="table table-striped btm-zero">
                                    <thead>
                                        <tr>
                                            <th>Discount Name</th>
                                            <th>Price</th>
                                            <th>Dates</th>
                                            <th>Timings</th>
                                            <th colSpan="4">Eating Option</th>
                                            <th>Action</th>
                                            <th>Edit</th>
                                            <th>Information</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td className="text-center">Delivery</td>
                                            <td className="text-center">Dine-In</td>
                                            <td className="text-center">Take Away</td>
                                            <td className="text-center">Drive Through</td>
                                            <td></td>
                                        </tr>
                                        {this.state.allData.map((promoData) =>
                                            <tr key={promoData.id}>
                                                <td>{ promoData.name.length ? promoData.name .charAt(0).toUpperCase() + promoData.name .slice(1) : promoData.name }</td>
                                                <td>RM {promoData.price}</td>
                                                <td>{ promoData.date_from } to { promoData.date_to } </td>
                                                <td>{ promoData.timing_from } to { promoData.timing_to }</td>
                                                <td className="text-center">{ () => this.checkEating(promoData.eating_opt)} <i className="fa fa-check-circle text-success" style={{color: '#97C229',fontSize: '16px'}}></i></td>

                                                {/* <td className="text-center" >{ () => this.checkEating(promoData.eating_opt,promoData.eating_opt.indexOf('Delivery'))}{promoData.eating_opt.indexOf('Delivery') > -1 ? <i className="fa fa-check-circle text-success" style={{color: '#97C229',fontSize: '16px'}}></i> : <i className="fa fa-times text-danger"></i>}</td> */}
                                                {/* <td className="text-center" >{this.checkEating(promoData.eating_opt,promoData.eating_opt.indexOf('Dine-in'))}{promoData.eating_opt.indexOf('Dine-in') > -1 ? <i className="fa fa-check-circle text-success" style={{color: '#97C229',fontSize: '16px'}}></i> : <i className="fa fa-times text-danger"></i>}</td>
                                                <td className="text-center" >{this.checkEating(promoData.eating_opt,promoData.eating_opt.indexOf('Take Away'))}{promoData.eating_opt.indexOf('Take Away') > -1 ? <i className="fa fa-check-circle text-success" style={{color: '#97C229',fontSize: '16px'}}></i> : <i className="fa fa-times text-danger"></i>}</td>
                                                <td className="text-center" >{this.checkEating(promoData.eating_opt,promoData.eating_opt.indexOf('Drive Through'))}{promoData.eating_opt.indexOf('Drive Through') > -1 ? <i className="fa fa-check-circle text-success" style={{color: '#97C229',fontSize: '16px'}}></i> : <i className="fa fa-times text-danger"></i>}</td> */}
                                                <td>
                                                    <button data-toggle="tooltip" style={{background: 'none',border: 'none'}} data-placement="top" onClick={this.deletePromo.bind(this,promoData.pro_id)} title="Delete"><i className="fa fa-times text-danger"></i></button> &nbsp;
                                                </td>
                                                <td> 
                                                  <button className="text-center fa fa-pencil" onClick={() => this.edit(promoData)}></button>
                                                </td>
                                                <td>
                                                <button className="text-center fa fa-info" onClick={() => this.istoggleOn(promoData)}></button>
                                                {this.state.toggle === true ?
                                                <Modal visible={this.state.toggle} width="400" height="300" effect="fadeInUp" onClickAway={() => this.closeModal()}>
                                                  <div>
                                                <p>Name : {this.state.toggleData.name}</p>
                                                <p>Description : {this.state.toggleData.description}</p>
                                                <p>Price : {this.state.toggleData.price}</p>
                                                <p>Eating Option : {this.state.toggleData.eating_opt}</p>
                                                <p>Timing : {this.state.toggleData.timing_from}-{this.state.toggleData.timing_to}</p>
                                                <p>Date : {this.state.toggleData.date_from}-{this.state.toggleData.date_to}</p> */}
                                                      {/* <a href="javascript:void(0);" onClick={() => this.closeModal()}>Close</a> */}
                                                   </div>
                                                </Modal>: null}
                                                </td>
                                            </tr>
                                        )}
                                    </tbody>
                                </table>
                            </div>

                        </div>

                    </div>
                </section>
            </div>       
            </div>
        );
    }
}
 
export default Promotion;